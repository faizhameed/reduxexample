{"version":3,"sources":["logo.svg","components/Posts.js","actions/postActions.js","actions/types.js","components/Postform.js","reducers/postReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Posts","this","props","fetchPosts","nextProps","newPost","posts","unshift","postitems","map","post","react_default","a","createElement","key","id","title","body","Component","connect","state","items","item","dispatch","fetch","then","res","json","type","payload","Postform","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChange","bind","assertThisInitialized","onSubmit","e","setState","defineProperty","target","name","value","preventDefault","createPost","postData","method","headers","content-type","JSON","stringify","initialState","combineReducers","arguments","length","undefined","action","objectSpread","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION__","App","es","className","src","logo","alt","components_Postform","components_Posts","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.619b5d30.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\nimport {connect} from 'react-redux';\nimport {fetchPosts} from '../actions/postActions';\nimport propTypes from 'prop-types'\n\n class Posts extends Component {\n    \n    componentWillMount() {\n        this.props.fetchPosts();\n      }\n    componentWillReceiveProps(nextProps){\n        if(nextProps.newPost){\n            this.props.posts.unshift(nextProps.newPost)\n        }\n    }\n\n    render() {\nconst postitems = this.props.posts.map(post=>{\n    return(\n        <div key ={post.id}>\n           <h3>{post.title}</h3> \n            <p>{post.body}</p>\n        </div>\n    )\n})\n\n        return (\n            <div>\n              <h1>Posts</h1>  \n              {postitems}\n            </div>\n        )\n    }\n}\n\nPosts.propTypes={\n    fetchPosts:propTypes.func.isRequired,\n    posts: propTypes.array.isRequired,\n    newPost: propTypes.object \n}\n\nconst mapStateToProps = (state)=>({\n    posts:state.posts.items,\n    newPost: state.posts.item\n}); \nexport default connect(mapStateToProps,{fetchPosts})(Posts);","import {FETCH_POSTS,NEW_POST} from './types';\n\n\nexport const fetchPosts = () => dispatch => {\n    fetch('https://jsonplaceholder.typicode.com/posts')\n      .then(res => res.json())\n      .then(posts =>\n        dispatch({\n          type: FETCH_POSTS,\n          payload: posts\n        })\n      );\n  };\n\nexport const createPost = (postData)=> dispatch=>{\n    fetch('https://jsonplaceholder.typicode.com/posts',{\n        method:\"POST\",\n        headers:{\n            'content-type':'application/JSON'\n        },\n        body:JSON.stringify(postData)\n    }).then(res=>res.json())\n    .then(post=>dispatch({\n        type: NEW_POST,\n        payload: post\n      }));\n}\n  ","export const FETCH_POSTS = 'FETCH_POSTS';\nexport const NEW_POST = 'NEW_POST';\n","import React, { Component } from 'react';\nimport {connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {createPost} from '../actions/postActions'\n\n class Postform extends Component {\n    constructor(props){\n        super(props);\n       this.state={ \n           title:'',\n           body:''\n       };\n       this.onChange = this.onChange.bind(this);\n       this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    onChange(e){\n        this.setState({\n            [e.target.name]:e.target.value\n        })\n    }\n    onSubmit (e){\n        e.preventDefault();\n        const post = {\n            title: this.state.title,\n            body: this.state.body\n        }\n       this.props.createPost(post); \n    }\n    render() {\n        return (\n            <div>\n                <h1>Add Post</h1>\n                <form onSubmit = {this.onSubmit}>\n                    <div>\n                        <label>Title:</label><br/>\n                        <input type=\"text\" name=\"title\" onChange={this.onChange} value = {this.state.title}/>\n                    </div>\n                    <br/>\n                    <div>\n                        <label>Body:</label><br/>\n                        <textarea name=\"body\" onChange={this.onChange} value = {this.state.body}/>\n                    </div>\n                    <br/>\n                    <button type = 'submit'>Submit</button>\n                </form>\n                 \n            </div>\n        )\n    }\n}\n\n Postform.propTypes = {\n     createPost: PropTypes.func.isRequired \n }\n\nexport default connect (null,{createPost})(Postform);\n","import {FETCH_POSTS,NEW_POST} from '../actions/types';\n\n\n\nconst initialState = {\n    items:[],\n    item:{}\n}\n\nexport default function(state = initialState,action){\n  switch(action.type){\n    case FETCH_POSTS:\n        return{\n            ...state,\n            items:action.payload\n\n        }\n    case NEW_POST:\n        return{\n            ...state,\n            item:action.payload\n        }\n      default: return state;\n  }   \n}","import { combineReducers } from \"redux\";\nimport postReducer from './postReducer';\n\n\nexport default combineReducers({\n    posts:postReducer\n});","\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\n\n\nconst initialState = {};\nconst middleware = [thunk];\n\n\n\nconst store =createStore(\n    rootReducer,\n    initialState,\n \n    compose(\n        applyMiddleware(...middleware),\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n      )\n)\n\nexport default store;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Posts from './components/Posts';\nimport Postform from './components/Postform';\nimport {Provider} from 'react-redux';\nimport store from './store';\n\n\nfunction App() {\n  return (\n    <Provider store = {store}>\n      <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      <Postform/>\n      <hr/>\n      <Posts/>\n     </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}